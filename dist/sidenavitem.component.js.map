{"version":3,"file":"sidenavitem.component.js","sourceRoot":"","sources":["../src/sidenavitem.component.ts"],"names":[],"mappings":";AAAA,OAAO,EAAE,KAAK,EAAE,aAAa,EAAE,QAAQ,EAAC,MAAM,aAAa,CAAC;AAE5D,OAAO,EAAE,IAAI,EAAE,MAAM,mBAAmB,CAAC;AAEzC,OAAO,iBAAiB,MAAM,sBAAsB,CAAC;AACrD,OAAO,QAAQ,MAAM,wBAAwB,CAAC;AAG9C,IAAa,WAAW,GAAxB,MAAa,WAAY,SAAQ,IAAI;IAArC;;QAGgE,eAAU,GAAY,KAAK,CAAC;QAC5B,eAAU,GAAY,KAAK,CAAC;QAC3B,gBAAW,GAAY,KAAK,CAAC;QACjC,aAAQ,GAAY,KAAK,CAAC;QAC1B,aAAQ,GAAY,KAAK,CAAC;QAC/B,SAAI,GAAW,GAAG,CAAC;QAEtC,UAAK,GAAW,EAAE,CAAC;QAQtD;;;;;;;;;;WAUG;QAEH;;;;WAIG;IACL,CAAC;IArBW,MAAM;QACd,OAAO,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAC7B,CAAC;CAmBF,CAAA;AAlCe,2BAAe,GAAG,CAAC,iBAAiB,CAAC,CAAC;AAEG;IAAtD,QAAQ,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,SAAS,EAAE,aAAa,EAAE,CAAC;;+CAAoC;AACnC;IAAtD,QAAQ,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,SAAS,EAAE,aAAa,EAAE,CAAC;;+CAAoC;AAClC;IAAvD,QAAQ,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,SAAS,EAAE,cAAc,EAAE,CAAC;;gDAAqC;AACxC;IAAnD,QAAQ,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,SAAS,EAAE,UAAU,EAAE,CAAC;;6CAAkC;AACjC;IAAnD,QAAQ,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,SAAS,EAAE,UAAU,EAAE,CAAC;;6CAAkC;AACtC;IAA9C,QAAQ,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,SAAS,EAAE,MAAM,EAAE,CAAC;;yCAA2B;AAE7C;IAA3B,QAAQ,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC;;0CAA2B;AAEvC;IAAd,KAAK,CAAC,MAAM,CAAC;8BAAmB,WAAW;0CAAC;AAZlC,WAAW;IADvB,aAAa,CAAC,gBAAgB,CAAC;GACnB,WAAW,CAmCvB;SAnCY,WAAW","sourcesContent":["import { query, customElement, property} from 'lit-element';\r\n\r\nimport { Base } from '@spectrum/sp-base';\r\n\r\nimport sidenavitemStyles from './sidenavitem.styles';\r\nimport template from './sidenavitem.template';\r\n\r\n@customElement('sp-sidenavitem')\r\nexport class SideNavItem extends Base {\r\n  public static componentStyles = [sidenavitemStyles];\r\n\r\n  @property({ type: Boolean, attribute: 'multi-level' }) public multiLevel: boolean = false;\r\n  @property({ type: Boolean, attribute: 'first-level' }) public firstLevel: boolean = false;\r\n  @property({ type: Boolean, attribute: 'second-level' }) public secondLevel: boolean = false;\r\n  @property({ type: Boolean, attribute: 'selected' }) public selected: boolean = false;\r\n  @property({ type: Boolean, attribute: 'disabled' }) public disabled: boolean = false;\r\n  @property({ type: String, attribute: 'href' }) public href: string = '#';\r\n\r\n  @property({ type: String }) public label: string = '';\r\n\r\n  @query('slot') protected items!: HTMLElement;\r\n\r\n  protected render() {\r\n    return template.call(this);\r\n  }\r\n\r\n  /*protected firstUpdated() {\r\n    const items = this.getItems();\r\n    items.forEach((item) => {\r\n      item.multiLevel = this.multiLevel;\r\n      if (this.firstLevel) {\r\n        item.secondLevel = true;\r\n      } else {\r\n        item.firstLevel = true;\r\n      }\r\n    });\r\n  }*/\r\n\r\n  /*private getItems(): SideNav[] {\r\n    return (this.items as HTMLSlotElement)\r\n      .assignedNodes({ flatten: true })\r\n      .filter((e: Node) => e instanceof SideNav) as any as SideNav[];\r\n  }*/\r\n}\r\n\r\ndeclare global {\r\n  interface HTMLElementTagNameMap {\r\n    'sp-sidenavitem': SideNavItem;\r\n  }\r\n}\r\n"]}